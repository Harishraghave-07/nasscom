#!/usr/bin/env python3
"""View the latest masked PNG generated by the pipeline.

Searches `debug_output/verification/gateway_run/` for the most recent run
folder, lists files matching `page_*_masked.png`, prints their paths and
opens the newest one via Pillow (if available) or the macOS `open` command.

Usage examples:
  python3 scripts/view_latest_masked.py
  python3 scripts/view_latest_masked.py --print-only
  python3 scripts/view_latest_masked.py --root debug_output/verification/gateway_run --no-open
"""

from __future__ import annotations

import argparse
import sys
import subprocess
from pathlib import Path
from typing import List, Optional


def find_latest_run_dir(root: Path) -> Optional[Path]:
    if not root.exists():
        return None
    # collect subdirectories only
    dirs = [p for p in root.iterdir() if p.is_dir()]
    if not dirs:
        return None
    dirs.sort(key=lambda p: p.stat().st_mtime, reverse=True)
    return dirs[0]


def find_masked_files(run_dir: Path) -> List[Path]:
    # recursive search in case the run folder contains subdirs
    return sorted(list(run_dir.rglob("page_*_masked.png")), key=lambda p: p.stat().st_mtime, reverse=True)


def open_with_pillow(path: Path) -> bool:
    try:
        from PIL import Image
    except Exception:
        return False
    try:
        img = Image.open(path)
        img.show()
        return True
    except Exception as e:
        print(f"Pillow failed to open {path}: {e}", file=sys.stderr)
        return False


def open_with_macos(path: Path) -> bool:
    try:
        subprocess.run(["open", str(path)], check=False)
        return True
    except Exception as e:
        print(f"macOS 'open' failed for {path}: {e}", file=sys.stderr)
        return False


def main() -> int:
    p = argparse.ArgumentParser(description="Find and open latest masked PNG from gateway runs")
    p.add_argument("--root", default="debug_output/verification/gateway_run/", help="Root directory for gateway runs")
    p.add_argument("--print-only", action="store_true", help="Only print matching file paths, do not open")
    p.add_argument("--no-open", action="store_true", help="Do not open images (print only)")
    p.add_argument("--preview", action="store_true", help="Open the most recent masked image (default if not --print-only)")
    args = p.parse_args()

    root = Path(args.root)
    latest = find_latest_run_dir(root)
    if latest is None:
        print(f"No run directories found under {root}")
        return 2

    print(f"Latest run directory: {latest}")
    masked = find_masked_files(latest)
    if not masked:
        print(f"No files matching page_*_masked.png found in {latest}")
        return 3

    print("Found masked files (newest first):")
    for f in masked:
        print(f"  {f}")

    if args.print_only or args.no_open:
        return 0

    # prefer Pillow if available, otherwise fall back to macOS open
    first = masked[0]
    opened = open_with_pillow(first)
    if not opened:
        opened = open_with_macos(first)

    if opened:
        print(f"Opened: {first}")
        return 0
    else:
        print(f"Failed to open: {first}. You can open it manually with: open {first}")
        return 4


if __name__ == "__main__":
    raise SystemExit(main())
